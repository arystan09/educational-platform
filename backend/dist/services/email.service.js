"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailService = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
let EmailService = class EmailService {
    configService;
    transporter;
    constructor(configService) {
        this.configService = configService;
        this.transporter = {
            sendMail: async (mailOptions) => {
                console.log('üìß EMAIL SENT (Development Mode):');
                console.log('To:', mailOptions.to);
                console.log('Subject:', mailOptions.subject);
                console.log('Content preview:', mailOptions.html.substring(0, 200) + '...');
                console.log('üìß End of email log');
                return Promise.resolve({ messageId: 'dev-' + Date.now() });
            }
        };
    }
    async sendVerificationEmail(email, token, name) {
        const verificationUrl = `${this.configService.get('FRONTEND_URL') || 'http://localhost:3001'}/verify-email?token=${token}`;
        const mailOptions = {
            from: this.configService.get('EMAIL_USER') || 'your-email@gmail.com',
            to: email,
            subject: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
            html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #2563eb;">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É!</h2>
          
          <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}!</p>
          
          <p>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –Ω–∞—à–µ–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å.</p>
          
          <div style="text-align: center; margin: 30px 0;">
            <a href="${verificationUrl}" 
               style="background-color: #2563eb; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;">
              –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å Email
            </a>
          </div>
          
          <p>–ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</p>
          <div style="background-color: #f3f4f6; padding: 10px; border-radius: 4px; font-family: monospace; margin: 10px 0;">
            ${token}
          </div>
          
          <p>–≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.</p>
          
          <p>–ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
          
          <hr style="margin: 30px 0; border: none; border-top: 1px solid #e5e7eb;">
          
          <p style="color: #6b7280; font-size: 12px;">
            –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–∏—Å—å–º–æ, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ.
          </p>
        </div>
      `,
        };
        try {
            await this.transporter.sendMail(mailOptions);
            console.log(`‚úÖ Verification email sent to ${email}`);
        }
        catch (error) {
            console.error('‚ùå Failed to send verification email:', error);
        }
    }
    async sendPasswordResetEmail(email, token, name) {
        const resetUrl = `${this.configService.get('FRONTEND_URL') || 'http://localhost:3001'}/reset-password?token=${token}`;
        const mailOptions = {
            from: this.configService.get('EMAIL_USER') || 'your-email@gmail.com',
            to: email,
            subject: '–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è - –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
            html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #2563eb;">–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è</h2>
          
          <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}!</p>
          
          <p>–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:</p>
          
          <div style="text-align: center; margin: 30px 0;">
            <a href="${resetUrl}" 
               style="background-color: #2563eb; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;">
              –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å
            </a>
          </div>
          
          <p>–ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:</p>
          <div style="background-color: #f3f4f6; padding: 10px; border-radius: 4px; font-family: monospace; margin: 10px 0;">
            ${token}
          </div>
          
          <p>–≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.</p>
          
          <p>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
          
          <hr style="margin: 30px 0; border: none; border-top: 1px solid #e5e7eb;">
          
          <p style="color: #6b7280; font-size: 12px;">
            –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–∏—Å—å–º–æ, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ.
          </p>
        </div>
      `,
        };
        try {
            await this.transporter.sendMail(mailOptions);
            console.log(`‚úÖ Password reset email sent to ${email}`);
        }
        catch (error) {
            console.error('‚ùå Failed to send password reset email:', error);
        }
    }
};
exports.EmailService = EmailService;
exports.EmailService = EmailService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [config_1.ConfigService])
], EmailService);
//# sourceMappingURL=email.service.js.map